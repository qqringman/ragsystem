 pip3.12 install -U langchain-community
pip3.12 install langchain-qwen
pip3.12 install msoffcrypto-tool
pip3.12 install chromadb
pip3.12 install -U langchain-huggingface

============================================================

 ✅ 重新編譯安裝 Python 3.12 並讓 _bz2 模組生效
請依照以下步驟操作（假設你在 /opt/python-build 目錄內）：

bash
複製
編輯
# 1. 刪除舊的 Python 編譯資料夾（若存在）
rm -rf /opt/python-build/Python-3.12.3

# 2. 重新下載並解壓縮 Python 3.12 原始碼
cd /opt
mkdir -p python-build && cd python-build
wget https://www.python.org/ftp/python/3.12.3/Python-3.12.3.tgz
tar -xvzf Python-3.12.3.tgz
cd Python-3.12.3

# 3. 重新 configure & build（此步驟會正確偵測到 libbz2-dev）
./configure --enable-optimizations
make -j$(nproc)
sudo make altinstall  # 注意不要用 make install，避免覆蓋系統預設 python

# 4. 測試是否修復成功
python3.12 -c "import bz2; print(bz2.decompress)"



============================================================

sudo apt update
sudo apt install build-essential libsqlite3-dev

cd /tmp
wget https://www.sqlite.org/2024/sqlite-autoconf-3450000.tar.gz
tar xvf sqlite-autoconf-3450000.tar.gz
cd sqlite-autoconf-3450000
./configure --prefix=/usr/local
make -j4
sudo make install


cd ~/ai/rag/minimal_rag_demo/tmp/Python-3.12.3

make clean  # 乾淨編譯

./configure --prefix=/usr/local \
    --enable-optimizations \
    --with-openssl=/usr/lib/x86_64-linux-gnu \
    LDFLAGS="-L/usr/local/lib" \
    CPPFLAGS="-I/usr/local/include"

make -j$(nproc)
sudo make install


============================================================


1️⃣ 安裝必要開發套件
sudo apt update
sudo apt-get install -y \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libncurses5-dev \
    libncursesw5-dev \
    xz-utils \
    tk-dev \
    libffi-dev \
    liblzma-dev

sudo apt-get install libgdbm-dev libgdbm-compat-dev	
sudo apt-get install -y \
    libsqlite3-dev \
    sqlite3 \
    libreadline-dev \
    libncurses5-dev \
    libncursesw5-dev
	

① 清除舊的 build 結果
cd ~/ai/rag/minimal_rag_demo/tmp/Python-3.12.3
make distclean || make clean

② 設環境變數，讓 Python 找到你安裝的 SQLite
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export CPPFLAGS="-I/usr/local/include"
export LDFLAGS="-L/usr/local/lib"
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig


③ 重新 configure 並指定 openssl 路徑（避免 ssl 模組缺失）
# 使用正確的路徑配置
./configure --prefix=/usr/local \
    --enable-optimizations \
    --with-openssl=/usr \
    --with-openssl-rpath=auto \
    LDFLAGS="-L/usr/lib/x86_64-linux-gnu -L/usr/local/lib" \
    LIBS="-lssl -lcrypto -lsqlite3" \
    CPPFLAGS="-I/usr/include -I/usr/include/sqlite3"
	
  
④ 重新 build 並安裝
make -j$(nproc)

# 檢查是否成功
find . -name "_sqlite3.cpython*.so" ! -name "*failed*" 2>/dev/null

sudo make install

⑤ 確認 Python 的 sqlite3 模組是否正確載入
python3.12 -c "import sqlite3; print(sqlite3.sqlite_version)"
# ← ✅ 要顯示 3.45.0 才是成功
  
  
# 檢查 Python 版本
/usr/local/bin/python3.12 --version

# 測試基本功能
/usr/local/bin/python3.12 -c "import sys; print(sys.version)"

# 測試 SSL 模組（重要）
/usr/local/bin/python3.12 -c "import ssl; print(ssl.OPENSSL_VERSION)"


============================================================


# 安裝 pysqlite3-binary
python3.12 -m pip install pysqlite3-binary

# 測試 pysqlite3
python3.12 -c "import pysqlite3; print(f'pysqlite3 version: {pysqlite3.sqlite_version}')"


# 檢查 Python 環境中的 SQLite 版本
python3.12 -c "
import sqlite3
print(f'SQLite version: {sqlite3.sqlite_version}')
print(f'SQLite library: {sqlite3.__file__}')
"

# 檢查 chromadb 使用的 SQLite
python3.12 -c "
import sys
sys.path.insert(0, 'python3.12/site-packages')
import chromadb
"
  
============================================================

  
python3.12 -m pip install langchain-anthropic langchain-openai langchain-community
  
  











